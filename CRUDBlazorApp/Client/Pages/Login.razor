@page "/login"
@inject IAuthen Authen
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider


@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>
<EditForm Model="user" OnValidSubmit="LoginUser">
    <DataAnnotationsValidator />
    <div class="mx-2">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mx-2">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    
    <button type="submit" class="btn btn-primary">Login</button>

    <!--<ValidationSummary />-->
</EditForm>
<div class="text-danger">
    <span>@errorMessage</span>
</div>


@code {
    private string errorMessage = string.Empty;
    private UserLogin user = new UserLogin();

    private async Task LoginUser()
    {
        var result = await Authen.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("");
        }
        else
        {
            errorMessage = result.Message;
        }
    }

}
