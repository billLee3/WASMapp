@page "/fetchdata"
@using CRUDBlazorApp.Shared
@inject HttpClient Http
@inject IProjectService ProjectService
@implements IDisposable

<PageTitle>Project Data Reporting</PageTitle>

<h1>Project Reporting</h1>

@if (projects == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-inline-flex border-1 border-dark">
        <div class="my-1 mx-2">
            <label><strong>Total projects: </strong> <span>@totalProjects</span></label>
        </div>
        <div class="my-1 mx-2">
            <label><strong>Total open projects: </strong> <span>@OpenProjects</span></label>
        </div>
        <div class="my-1 mx-2">
            <label><strong>Total closed projects: </strong><span>@ClosedProjects</span></label>
        </div>
        <div class="my-1 mx-2">
            <label><strong>NEPA Projects: </strong><span>@nepaProjects</span></label>
        </div>
        <div class="my-1 mx-2">
            <label><strong>ESA Projects: </strong><span>@esaProjects</span></label>
        </div>
        <div class="my-1 mx-2">
            <label><strong>PCA Projects: </strong><span>@pcaProjects</span></label>
        </div>
    </div>
    <div>
        <button @onclick="HandleClick">Projects in Ohio</button>
        <button @onclick="ALProjects">Projects in Alabama</button>
        <button @onclick="AllProjects">All Projects</button>
    </div>
    <div class="my-1">
        <RadzenDataGrid Data="@projects" TItem="Project" AllowFiltering="true" AllowColumnResize="true" AllowSorting="true">
            <Columns>
                <RadzenDataGridColumn TItem="Project" Property="Name" Title="Name" />
                <RadzenDataGridColumn TItem="Project" Property="Type" Title="Type" />
                <RadzenDataGridColumn TItem="Project" Property="Status" Title="Status" />
                <RadzenDataGridColumn TItem="Project" Property="AddressName" Title="Address Name" />
                <RadzenDataGridColumn TItem="Project" Property="City" Title="City" />
                <RadzenDataGridColumn TItem="Project" Property="State" Title="State" />
                <RadzenDataGridColumn TItem="Project" Property="AssignedTo" Title="Assigned To" />
                <RadzenDataGridColumn TItem="Project" Property="LastUpdate" Title="Last Update" />
            </Columns>
        </RadzenDataGrid>
    </div>
    
    
        
        
   
    

}

@code {
    public List<Project> projects { get; set; }
    public string? selectedStatus { get; set; } = null;
    public string? selectedType { get; set; } = null;
    public List<string> statusOptions = new List<string>
    {
        "Open",
        "Closed"
    };
    public int totalProjects { get; set; } = 0;
    public int OpenProjects { get; set; } = 0;
    public int ClosedProjects { get; set; } = 0;
    public int nepaProjects { get; set; } = 0;
    public int esaProjects { get; set; } = 0;
    public int pcaProjects { get; set; } = 0;
    public int count;

    protected override async Task OnInitializedAsync()
    {

        await ProjectService.GetProjects();
        projects = ProjectService.Projects;

        foreach(var project in projects)
        {
            totalProjects += 1;
            if(project.Status.ToLower() == "open")
            {
                OpenProjects += 1;
            }
            else
            {
                ClosedProjects += 1;
            }
            if(project.Type.ToLower() == "nepa")
            {
                nepaProjects += 1;
            }else if(project.Type.ToLower() == "esa")
            {
                esaProjects += 1;
            }else if(project.Type.ToLower() == "pca")
            {
                pcaProjects += 1;
            }
        }
    }

    protected override void OnInitialized()
    {
        ProjectService.ProjectsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProjectService.ProjectsChanged -= StateHasChanged;
    }

    public async void HandleClick()
    {
        await ProjectService.SearchProjects("OH");
        projects = ProjectService.Projects;
    }

    public async void AllProjects()
    {
        await ProjectService.GetProjects();
        projects = ProjectService.Projects;
    }

    public async void ALProjects()
    {
        await ProjectService.SearchProjects("AL");
        projects = ProjectService.Projects;
    }

    
}
